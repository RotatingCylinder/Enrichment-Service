"""
Setup wizard and auto setup logic for LLM Alert Enrichment Service
"""
import os
from src.config.settings import Settings

def run_auto_setup():
    print("LLM Alert Enrichment - Automatic Setup")
    print("=" * 50)
    if not os.path.exists('.env'):
        print("Creating minimal configuration...")
        settings = Settings()
        minimal_config = f"""# Auto-generated minimal configuration
# Edit only if auto-detection fails

# Auto-detected Ollama
OLLAMA_URL={settings.ollama_url}
LLM_MODEL={settings.llm_model}

# Auto-detected Wazuh Indexer  
WAZUH_INDEXER_URL={settings.wazuh_indexer_url}
WAZUH_INDEXER_USER=admin
WAZUH_INDEXER_PASS={settings.wazuh_indexer_pass}

# Optimized defaults
FILTER_MIN_SEVERITY=high
FILTER_ALLOWED_SEVERITIES=high,critical
FILTER_MIN_RISK_SCORE=70.0
WAZUH_POLL_INTERVAL=30
"""
        with open('.env', 'w') as f:
            f.write(minimal_config)
        print("Configuration created")
    print("\nTesting auto-detected configuration...")
    from src.core.service import AlertEnrichmentService
    service = AlertEnrichmentService()
    success = service.test()
    if success:
        print("\nSetup complete! You can now run:")
        print("   python enrichment_service.py start")
        if os.name == 'posix':
            print("   python enrichment_service.py install-service  # For systemd")
    else:
        print("\nAuto-detection failed. Run setup wizard:")
        print("   python enrichment_service.py setup")

def run_setup_wizard():
    print("LLM Alert Enrichment - Setup Wizard")
    print("=" * 50)
    config = {}
    print("\nDetecting environment...")
    settings = Settings()
    print(f"   Ollama detected at: {settings.ollama_url}")
    print(f"   Wazuh detected at: {settings.wazuh_indexer_url}")
    print(f"   Available model: {settings.llm_model}")
    if not settings.wazuh_indexer_pass:
        print(f"\nWazuh admin password needed")
        print("   You can find it in your Wazuh installation or Docker logs")
        password = input("   Enter admin password (or press Enter to set later): ").strip()
        if password:
            config['WAZUH_INDEXER_PASS'] = password
    print(f"\nAlert filtering (current: {settings.filter_min_severity}+ severity)")
    severity = input("   Minimum severity [low/medium/high/critical] (Enter for 'high'): ").strip().lower()
    if severity in ['low', 'medium', 'high', 'critical']:
        config['FILTER_MIN_SEVERITY'] = severity
        if severity == 'low':
            config['FILTER_ALLOWED_SEVERITIES'] = 'low,medium,high,critical'
        elif severity == 'medium':
            config['FILTER_ALLOWED_SEVERITIES'] = 'medium,high,critical'
        elif severity == 'high':
            config['FILTER_ALLOWED_SEVERITIES'] = 'high,critical'
        else:
            config['FILTER_ALLOWED_SEVERITIES'] = 'critical'
    env_content = f"""# LLM Alert Enrichment Configuration
# Generated by setup wizard

# Ollama Configuration
OLLAMA_URL={settings.ollama_url}
LLM_MODEL={settings.llm_model}

# Wazuh Indexer Configuration
WAZUH_INDEXER_URL={settings.wazuh_indexer_url}
WAZUH_INDEXER_USER=admin
WAZUH_INDEXER_PASS={config.get('WAZUH_INDEXER_PASS', settings.wazuh_indexer_pass)}

# Alert Filtering
FILTER_MIN_SEVERITY={config.get('FILTER_MIN_SEVERITY', settings.filter_min_severity)}
FILTER_ALLOWED_SEVERITIES={config.get('FILTER_ALLOWED_SEVERITIES', ','.join(settings.filter_allowed_severities))}
FILTER_MIN_RISK_SCORE=70.0

# Service Configuration
WAZUH_POLL_INTERVAL=30
WAZUH_LOOKBACK_MINUTES=5
WAZUH_STORE_ENRICHED=true

# Logging
LOG_LEVEL=INFO
LOG_FILE=logs/enrichment.log
"""
    with open('.env', 'w') as f:
        f.write(env_content)
    print(f"\nConfiguration saved to .env")
    print(f"\nTesting configuration...")
    from src.core.service import AlertEnrichmentService
    service = AlertEnrichmentService()
    success = service.test()
    if success:
        print(f"\nSetup successful! You can now:")
        print(f"   python enrichment_service.py start")
        if os.name == 'posix':
            print(f"   python enrichment_service.py install-service")
    else:
        print(f"\nConfiguration test failed. Please check:")
        if not config.get('WAZUH_INDEXER_PASS'):
            print(f"   - Set WAZUH_INDEXER_PASS in .env file")
        print(f"   - Ensure Ollama and Wazuh services are running")
        print(f"   - Run 'python enrichment_service.py test' for details")
